name: review

on:
  issue_comment:
    types: [created]
  pull_request:
    paths:
      - .github/workflows/review.yml
      - .claude/commands/pr-review.md
      - dev/mcps/review.py

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    timeout-minutes: 30
    # Security: Only run for authorized users.
    # - pull_request: Only run for PRs from the upstream repo by authorized users (not forks)
    # - issue_comment: BOTH PR author and commenter must be authorized (can't trust external PRs)
    if: >
      (github.event_name == 'pull_request' &&
       github.event.pull_request.head.repo.full_name == github.repository &&
       contains(fromJson('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.pull_request.author_association))
      ||
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request &&
       contains(fromJson('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.issue.author_association) &&
       contains(fromJson('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association) &&
       startsWith(github.event.comment.body, '/review'))
    steps:
      - name: React to comment
        if: ${{ github.event_name == 'issue_comment' }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { comment } = context.payload;

            // Check user association - only allow OWNER, MEMBER, or COLLABORATOR
            const authorAssociation = comment.author_association;
            const isAllowed = ['OWNER', 'MEMBER', 'COLLABORATOR'].includes(authorAssociation);

            let message;
            if (isAllowed) {
              const workflowUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}?pr=${context.issue.number}`;
              message = `🚀 [Review workflow started](${workflowUrl})`;
            } else {
              message = `⚠️ Only repository maintainers and collaborators are allowed to trigger this workflow. Your association: ${authorAssociation}`;
            }

            const updatedBody = `${comment.body}\n\n---\n${message}`;

            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: comment.id,
              body: updatedBody,
            });

            if (!isAllowed) {
              throw new Error(`User not allowed to trigger workflow: ${comment.user.login} (association: ${authorAssociation})`);
            }
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: refs/pull/${{ github.event.pull_request.number || github.event.issue.number }}/merge
      - uses: astral-sh/setup-uv@f0ec1fc3b38f5e7cd731bb6ce540c5af426746bb # v6.1.0
      - name: Install Claude CLI
        run: |
          npm install -g @anthropic-ai/claude-code@2.0.24

      - name: Set up MCP servers
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          claude mcp add review --env "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" -- uv run --no-project dev/mcps/review.py

      - name: Review
        id: review
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          PR_NUMBER: ${{ github.event.pull_request.number || github.event.issue.number }}
        run: |
          OUTPUT_FILE="/tmp/output.json"

          EXIT_CODE=0
          timeout 20m claude --model claude-haiku-4-5 --print --verbose --output-format json "/pr-review" > "$OUTPUT_FILE" 2>&1 || EXIT_CODE=$?
          if [ "${EXIT_CODE:-0}" -eq 124 ]; then
            echo "Warning: Claude command timed out after 20 minutes"
          elif [ "${EXIT_CODE:-0}" -ne 0 ]; then
            echo "Error: Claude command failed with exit code $EXIT_CODE"
            cat "$OUTPUT_FILE"
            exit $EXIT_CODE
          fi

          # Display output in workflow logs (pretty print if valid JSON)
          echo "=== Claude Output ==="
          if [ ! -s "$OUTPUT_FILE" ]; then
            echo "(empty output)"
          elif jq empty "$OUTPUT_FILE" 2>/dev/null; then
            jq . "$OUTPUT_FILE"
          else
            cat "$OUTPUT_FILE"
          fi
          echo "===================="

      - name: Report review results
        if: ${{ github.event_name == 'issue_comment' }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const { comment } = context.payload;

            // Read Claude output from file instead of environment variable
            const outputPath = '/tmp/output.json';
            let claudeOutput = '';
            try {
              if (fs.existsSync(outputPath)) {
                claudeOutput = fs.readFileSync(outputPath, 'utf8');
              }
            } catch (e) {
              console.log('Failed to read Claude output file:', e);
            }

            let resultMessage = '✅ Review completed.';

            // Extract and display Claude's result from JSON output
            if (claudeOutput) {
              try {
                const events = JSON.parse(claudeOutput);
                const resultEvent = events.findLast(({ type }) => type === 'result');
                if (resultEvent) {
                  resultMessage += `\n\n<details>\n<summary>Review Output</summary>\n\n${resultEvent.result}\n\n</details>`;
                }
              } catch (e) {
                console.log('Failed to parse Claude output as JSON:', e);
              }
            }

            console.log('Result message to post:', resultMessage);

            const { data: currentComment } = await github.rest.issues.getComment({
              owner,
              repo,
              comment_id: comment.id,
            });

            const updatedBody = `${currentComment.body}\n\n---\n${resultMessage}`;

            await github.rest.issues.updateComment({
              owner,
              repo,
              comment_id: comment.id,
              body: updatedBody
            });
