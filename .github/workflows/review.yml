name: review

on:
  issue_comment:
    types: [created]
  pull_request:
    paths:
      - .github/workflows/review.yml
      - dev/mcps/review.py

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      models: read
      pull-requests: write
    timeout-minutes: 10
    # Run on pull_request events from mlflow/mlflow (not forks) or when harupy comments '/review' on a pull request
    if: >
      (github.event_name == 'pull_request' &&
       github.event.pull_request.head.repo.full_name == 'mlflow/mlflow')
      ||
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request &&
       startsWith(github.event.comment.body, '/review') &&
       github.event.comment.user.login == 'harupy')
    steps:
      - name: React to comment
        if: ${{ github.event_name == 'issue_comment' }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { comment } = context.payload;
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: comment.id,
              content: 'rocket'
            });
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          sparse-checkout: |
            dev
      - uses: astral-sh/setup-uv@f0ec1fc3b38f5e7cd731bb6ce540c5af426746bb # v6.1.0
        with:
          version: 0.7.8
      - name: Install codex
        run: |
          curl -L -o codex.tar.gz https://github.com/openai/codex/releases/download/rust-v0.25.0/codex-x86_64-unknown-linux-musl.tar.gz
          tar -xzf codex.tar.gz
          mv codex-x86_64-unknown-linux-musl codex
          chmod +x codex
          ./codex --version

      - name: Set up config
        run: |
          # https://github.com/openai/codex/blob/main/docs/config.md
          mkdir -p ~/.codex
          cat <<'EOF' > ~/.codex/config.toml
          # TODO: Use github models if gpt-5 supports higher input/output token limits
          # https://github.com/marketplace/models/azure-openai/gpt-5
          # model = "openai/gpt-5"
          # model_provider = "github-models"
          model_verbosity = "high"
          approval_policy = "never"
          sandbox_mode = "workspace-write"

          [sandbox_workspace_write]
          network_access = true

          [model_providers.github-models]
          # https://docs.github.com/en/github-models/use-github-models/prototyping-with-ai-models#rate-limits
          name = "GitHub Models"
          base_url = "https://models.github.ai/inference"
          env_key = "GITHUB_TOKEN"
          wire_api = "chat"

          [mcp_servers.github]
          # https://github.com/github/github-mcp-server
          command = "uv"
          args = [
            "run",
            "--no-project",
            "dev/mcps/review.py"
          ]
          env = { "GITHUB_TOKEN" = "${{ secrets.GITHUB_TOKEN }}" }
          EOF

      - name: Prompt
        run: |
          cat <<'EOF' > AGENTS.md
          You're a helpful assistant to review PRs. Your task is to follow the instructions below and review the given PR.

          # Instructions

          ## 1. Fetch and Analyze PR
          - Use `fetch_diff` tool to fetch the PR diff
          - Carefully examine all changes in the diff

          ## 2. Review Against Style Guide
          - Read `dev/guides/python.md` thoroughly
          - Check for violations of the style guide

          ## 3. Decision Point
          - If NO issues found -> Skip remaining steps
          - If issues found -> Continue to step 4

          ## 4. Add Review Comments
          - Use `add_pr_review_comment` tool for each issue found
          - Comment parameters:
            - Single-line: Set `subject_type` to `LINE`, specify `line`
            - Multi-line: Set `subject_type` to `LINE`, specify both `start_line` and `line`
          - Comment format:
            - Use triple backticks (```) for code examples with an appropriate language identifier
            - Be specific about the violation and suggest fixes
            - Include `ðŸ¤– Generated by Codex` at the end of each comment
          EOF

      - name: Run codex
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ github.event.issue.pull_request.html_url || github.event.pull_request.html_url}}
        run: |
          # Use timeout in case codex hangs
          timeout 3m ./codex exec --skip-git-repo-check "Can you review $PR_URL?" || true
