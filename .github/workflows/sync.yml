name: Sync PR

on:
  issue_comment:
    types: [created]

defaults:
  run:
    shell: bash

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: ${{ github.event.issue.pull_request && startsWith(github.event.comment.body, '/sync') }}
    permissions:
      pull-requests: write
      issues: write
    outputs:
      should_sync: ${{ fromJSON(steps.validate.outputs.result).shouldSync }}
      repository: ${{ fromJSON(steps.validate.outputs.result).repository }}
      head_ref: ${{ fromJSON(steps.validate.outputs.result).head_ref }}
      head_sha: ${{ fromJSON(steps.validate.outputs.result).head_sha }}
      base_ref: ${{ fromJSON(steps.validate.outputs.result).base_ref }}
      base_sha: ${{ fromJSON(steps.validate.outputs.result).base_sha }}
      base_repo: ${{ fromJSON(steps.validate.outputs.result).base_repo }}
      pull_number: ${{ fromJSON(steps.validate.outputs.result).pull_number }}
      trigger_comment_id: ${{ fromJSON(steps.validate.outputs.result).triggerCommentId }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          sparse-checkout: |
            .github

      - name: Initial validation and reaction
        id: validate
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            core.debug(JSON.stringify(context, null, 2));
            const sync = require('./.github/workflows/sync.js');

            // Validate comment is exactly "/sync"
            const { comment } = context.payload;
            if (!sync.shouldSync(comment)) {
              await sync.updateTriggerComment(context, github, comment.id, '‚ùå Invalid sync command. Use exactly "/sync"');
              core.setFailed('Invalid sync command. Use exactly "/sync"');
              return { shouldSync: false };
            }

            // Add initial reaction and workflow link
            await sync.createInitialReaction(context, github);

            // Get PR info
            const pullInfo = await sync.getPullInfo(context, github);
            return { ...pullInfo, shouldSync: true, triggerCommentId: comment.id };

      - name: Validate author permissions
        if: ${{ fromJSON(steps.validate.outputs.result).shouldSync }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const sync = require('./.github/workflows/sync.js');
            const triggerCommentId = ${{ fromJSON(steps.validate.outputs.result).triggerCommentId }};
            await sync.validateAuthorPermissions(context, github, core, triggerCommentId);

      - name: Validate PR conditions
        if: ${{ fromJSON(steps.validate.outputs.result).shouldSync }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const sync = require('./.github/workflows/sync.js');
            const pullInfo = ${{ steps.validate.outputs.result }};
            const triggerCommentId = ${{ fromJSON(steps.validate.outputs.result).triggerCommentId }};
            await sync.validatePRConditions(context, github, pullInfo, triggerCommentId);

  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate
    if: ${{ needs.validate.outputs.should_sync == 'true' }}
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          sparse-checkout: |
            .github

      - name: Setup bot token
        id: app-token
        uses: actions/create-github-app-token@d72941d797fd3113feb6b93fd0dec494b13a2547 # v1.12.0
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout PR head
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: ${{ needs.validate.outputs.repository }}
          ref: ${{ needs.validate.outputs.head_ref }}
          fetch-depth: 300
          token: ${{ steps.app-token.outputs.token }}

      - name: Perform sync
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          BOT_TOKEN: ${{ steps.app-token.outputs.token }}
        with:
          script: |
            const sync = require('./.github/workflows/sync.js');
            const pullInfo = {
              repository: '${{ needs.validate.outputs.repository }}',
              pull_number: '${{ needs.validate.outputs.pull_number }}',
              head_ref: '${{ needs.validate.outputs.head_ref }}',
              base_ref: '${{ needs.validate.outputs.base_ref }}',
              base_repo: '${{ needs.validate.outputs.base_repo }}'
            };
            const triggerCommentId = '${{ needs.validate.outputs.trigger_comment_id }}';
            await sync.performSync(context, github, pullInfo, process.env.BOT_TOKEN, triggerCommentId);

      - name: Update comment status
        if: always()
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const sync = require('./.github/workflows/sync.js');
            const success = '${{ job.status }}' === 'success';
            const triggerCommentId = '${{ needs.validate.outputs.trigger_comment_id }}';
            await sync.updateFinalStatus(context, github, success, triggerCommentId);
