// This file contains the proto definition for communicating with the Databricks tracing server.
// The message definition should be kept in (mostly) sync with the MLflow service definition.
syntax = "proto2";

package mlflow.assessments;

import "databricks.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option java_package = "org.mlflow.api.proto";
option py_generic_services = true;

message AssessmentSource {
  // Type of the assessment source.
  enum SourceType {
    SOURCE_TYPE_UNSPECIFIED = 0;
    // Assessment from a human.
    HUMAN = 1;
    // Assessment from an LLM Judge.
    LLM_JUDGE = 2;
    // Code-based assessment, (e.g. Python UDF).
    CODE = 3;
  }
  // The type of the source.
  optional SourceType source_type = 1 [(validate_required) = true];

  // Identifier for the source.
  // Example: For human -> user name; for LLM judge -> judge source (databricks or custom); for code -> empty.
  optional string source_id = 2 [(validate_required) = true];
}

message AssessmentError {
  // Value of an assessment when an error has occurred.
  optional string error_code = 1;

  optional string error_message = 2;

  // Stack trace of the error. Truncated to 1000 characters to avoid making TraceInfo too large.
  optional string stack_trace = 3;
}

// An expectation for the values or guidelines for the outputs that a model or agent should produce
// from the inputs contained in the trace.
message Expectation {
  // The value of the expectation-based assessment. This uses ``google.protobuf.Value`` under the hood to support a
  // flexible schema of expectation values but is validated to constrain it to specific types. This means the value must
  // be JSON conforming to one of the following supported types:
  // * Numeric values like integers or floats
  // * Boolean values
  // * Text value (can contain JSON text the user wishes to store, but it will only be searchable as text)
  // * List values containing only strings (empty lists allowed).
  //
  // Other values like null, structs, non-string lists etc. will be rejected. However, they can instead be serialized as
  // a string and stored in the ``serialized_value`` field instead. Only one of either ``serialized_value`` or ``value``
  // may be defined. We do not support these other formats directly despite using google.protobuf.Value due to security
  // risks around their serialization and deserialization.
  optional google.protobuf.Value value = 2;

  message SerializedValue {
    // Marks the serialization format for the expectation value. This is a contract specific to the client. The service
    // will not attempt to deserialize the value or validate the format. An example format is "JSON_FORMAT".
    optional string serialization_format = 1;

    // The value of the expectation-based assessment serialized as a string in the format defined by ``serialization_format``.
    optional string value = 2;
  }

  // The value of the expecation-based assessment serialized as a string in a specified format. Only one of either 
  // ``serialized_value`` or ``value`` may be defined.
  optional SerializedValue serialized_value = 3;
}

// Feedback provided on the model / agent output(s) contained in the trace
message Feedback {
  // Value of the feedback-based assessment.
  // We use google.protobuf.Value to support a flexible schema of feedback values.
  // Supported initial types:
  // - Numeric values like integers or floats
  // - Boolean values
  // - Text value (can contain json text the user wishes to store, but it will only be searchable as text)
  // - Non-empty list values containing only strings
  // - Other values like structs, non-string lists etc. will be rejected for now
  optional google.protobuf.Value value = 2;

  // An error encountered while generating the feedback. Required if value is set to null.
  optional AssessmentError error = 3;
}

// Data and metadata for an assessment of a trace.
message Assessment {
  // Unique ID of the assessment.
  // NB: This is not marked as required field via "validate_required", because the message is
  //  used in the context of creating a new assessment, where the ID is not known.
  optional string assessment_id = 1;

  // Name of the assessment. The name must not contain ".".
  optional string assessment_name = 2 [(validate_required) = true];
  // ID of the trace this assessment is associated with.
  optional string trace_id = 3;

  // ID of the span if the assessment is for a particular span (optional).
  optional string span_id = 4;

  // The source this assessment came from.
  optional AssessmentSource source = 5;

  // The creation time of this assessment.
  optional google.protobuf.Timestamp create_time = 6;

  // The last update time of this assessment.
  optional google.protobuf.Timestamp last_update_time = 7;

  // An Assessment can either be human/code/judge Feedback, human-generated Expectation, or an error.
  // The name of the Feedback or Expectation must be the same with the assessment_name.
  oneof value {
    // The feedback on the trace from this assessment.
    Feedback feedback = 9;
    // A representation of the guidelines and/or expected response from the agent.
    Expectation expectation = 10;
  }

  // Justification for the assessment.
  optional string rationale = 11;

  // [Deprecated, use the ``error`` field in ``feedback`` instead]
  // An error encountered while computing the assessment.
  optional AssessmentError error = 12 [deprecated = true];

  // Additional metadata describing the assessment and store additional information,
  // such as the chunk relevance chunk_index. This metadata is required to be JSON-serializable.
  map<string, string> metadata = 13;
}
