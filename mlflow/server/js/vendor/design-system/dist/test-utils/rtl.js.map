{"version":3,"file":"rtl.js","sources":["../../src/test-utils/rtl/select.ts","../../src/test-utils/rtl/selectEvent.ts","../../src/test-utils/rtl/simpleSelect.utils.ts","../../src/test-utils/rtl/table.ts","../../src/test-utils/rtl/index.ts"],"sourcesContent":["import { queryHelpers, within } from '@testing-library/react';\nimport { computeAccessibleName } from 'dom-accessibility-api';\n\nfunction normalizeText(text: string): string {\n  return text.replace(/\\s+/g, ' ').trim();\n}\n\n/**\n * Extracts the display label from a combobox — equivalent to the selected\n * option's label.\n */\nexport function getDisplayLabel(combobox: HTMLElement): string {\n  return normalizeText(combobox.textContent ?? '');\n}\n\n/**\n * Finds the associated listbox for a combobox.\n *\n * @usage\n *\n * ```tsx\n * const combobox = screen.getByRole('combobox', { name: '…' });\n * await userEvent.click(combobox);\n * const listbox = select.getListbox(combobox);\n * await userEvent.click(within(listbox).getByRole('option', { name: '…' }));\n * ```\n */\nexport function getListbox(combobox: HTMLElement): HTMLElement {\n  const id = combobox.getAttribute('aria-controls');\n  if (!id) {\n    throw queryHelpers.getElementError(\n      \"This doesn't appear to be a combobox. Make sure you're querying the right element: `ByRole('combobox', { name: '…' })`\",\n      combobox,\n    );\n  }\n  const listbox = combobox.ownerDocument.getElementById(id);\n  if (!listbox) {\n    throw queryHelpers.getElementError(\n      \"Can't find the listbox. Are you sure the select has been opened? `await userEvent.click(combobox)`\",\n      combobox.ownerDocument.body,\n    );\n  }\n  return listbox;\n}\n\n/**\n * Returns all options associated with a combobox (requires the select to have\n * been opened).\n */\nexport function getOptions(combobox: HTMLElement): HTMLElement[] {\n  const listbox = getListbox(combobox);\n  return within(listbox).getAllByRole('option');\n}\n\n/**\n * Returns the accessible name for each option in a combobox.\n */\nexport function getOptionNames(combobox: HTMLElement): string[] {\n  const options = getOptions(combobox);\n  return options.map((option) => computeAccessibleName(option));\n}\n","import { queryHelpers, waitFor, within } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport { selectClasses } from '../common';\n\n/**\n * Allows the helpers in this module to be used when the select element is\n * queried _semantically_ (as if it were a native <select> element) - i.e.\n * `ByRole('combobox', { name: '...' })`, rather than by test ID.\n *\n * Also checks if <DesignSystemProvider> was used, because many of the helpers\n * in this module query by class name starting with \"du-bois-\", which requires\n * the provider.\n */\nfunction getRootElement(element: HTMLElement): HTMLElement {\n  if (element.getAttribute('role') === 'combobox') {\n    element = element.closest(`.${selectClasses.selector}`)!.parentElement!;\n  }\n  if (element.classList.contains('ant-select')) {\n    throw new Error('Component must be wrapped by <DesignSystemProvider>');\n  }\n  return element;\n}\n\nfunction getOptionsList(select: HTMLElement): HTMLElement {\n  const body = select.ownerDocument.body;\n  const input = within(select).getByRole('combobox');\n  const listId = input.getAttribute('aria-owns') || input.getAttribute('aria-controls');\n  if (!listId) {\n    throw queryHelpers.getElementError('Options input does not control an options list', body);\n  }\n\n  const listbox = select.ownerDocument.getElementById(listId);\n  if (!listbox?.parentElement) {\n    throw queryHelpers.getElementError('Options listbox does not have a parent', body);\n  }\n\n  const optionsList = listbox.parentElement.querySelector<HTMLElement>(`.${selectClasses.list}`);\n  if (!optionsList) {\n    throw queryHelpers.getElementError('Options list not found', body);\n  }\n\n  return optionsList;\n}\n\n/**\n * Opens the dropdown menu for the <Select/> by clicking. Will throw an error if\n * the menu is already opened or if the menu is unable to be opened.\n */\nexport async function openMenu(select: HTMLElement): Promise<void> {\n  select = getRootElement(select);\n  if (select.classList.contains(selectClasses.open)) {\n    throw queryHelpers.getElementError('Select is already open', select);\n  }\n  const selector = select.querySelector(`.${selectClasses.selector}`);\n  if (!selector) {\n    throw queryHelpers.getElementError('Selector not found', select);\n  }\n  await userEvent.click(selector, { pointerEventsCheck: 0 });\n  await waitFor(() => {\n    if (!select.classList.contains(selectClasses.open)) {\n      throw queryHelpers.getElementError('Select did not open', select);\n    }\n  });\n}\n\n/**\n * Closes the dropdown menu for the <Select/> by clicking. Will throw an error if\n * the menu is already closed or if the menu is unable to be closed.\n */\nexport async function closeMenu(select: HTMLElement): Promise<void> {\n  select = getRootElement(select);\n  if (!select.classList.contains(selectClasses.open)) {\n    throw queryHelpers.getElementError('Select is already closed', select);\n  }\n  const selector = select.querySelector(`.${selectClasses.selector}`);\n  if (!selector) {\n    throw queryHelpers.getElementError('Selector not found', select);\n  }\n  await userEvent.click(selector, { pointerEventsCheck: 0 });\n  await waitFor(() => {\n    if (select.classList.contains(selectClasses.open)) {\n      throw queryHelpers.getElementError('Select did not close', select);\n    }\n  });\n}\n\n/**\n * Returns a string concatenating the labels for all selected options.\n */\nexport function getLabelText(select: HTMLElement): string {\n  select = getRootElement(select);\n  const selector = select.querySelector(`.${selectClasses.selector}`);\n  if (!selector) {\n    throw queryHelpers.getElementError('Selector not found', select);\n  }\n  // Trim the text to avoid weird whitespace issues non-label elements being added.\n  // For example, the input mirror is an empty span with some whitespace that is\n  // nested under the selector but does not show up in the label text.\n  return selector.textContent?.trim() ?? '';\n}\n\n/**\n * Removes the `option` by clicking its \"X\" button. Can only be used with a <Select/>\n * component with `mode=\"multiple\"`. The provided strings must match the option label\n * exactly.\n */\nexport async function removeMultiSelectOption(select: HTMLElement, option: string): Promise<void> {\n  select = getRootElement(select);\n  const selector = select.querySelector<HTMLElement>(`.${selectClasses.selector}`);\n  if (!selector) {\n    throw queryHelpers.getElementError('Selector not found', select);\n  }\n  const optionItem = within(selector).getByText(option).closest(`.${selectClasses.item}`);\n  if (optionItem === null) {\n    throw queryHelpers.getElementError(`Option \"${option}\" not found`, select);\n  }\n  const removeItem = optionItem.querySelector(`.${selectClasses.removeItem}`);\n  if (removeItem === null) {\n    throw queryHelpers.getElementError(`Remove button for option \"${option}\" not found`, optionItem as HTMLElement);\n  }\n  await userEvent.click(removeItem);\n}\n\n/**\n * Selects options from the dropdown menu for a <Select/> component with `mode=\"multiple\"`.\n * The provided strings must match the option labels exactly. There is a known\n * limitation for lists that are extremely long because AntD virtualizes the\n * options so not all may options may be rendered in the DOM. If this is causing\n * you issues, please let #help-frontend know.\n */\nexport async function multiSelect(select: HTMLElement, options: (string | RegExp)[]): Promise<void> {\n  select = getRootElement(select);\n  await openMenu(select);\n  const optionsList = getOptionsList(select);\n  for (let i = 0; i < options.length; i++) {\n    const option = options[i];\n    const optionItem = within(optionsList).getByText(option);\n    await userEvent.click(optionItem, { pointerEventsCheck: 0 });\n  }\n  // Close the menu to indicate that selection has finished\n  await closeMenu(select);\n}\n\n/**\n * Selects options from the dropdown menu for a <Select/> component without a\n * mode. The provided string must match an option label exactly. There is a known\n * limitation for lists that are extremely long because AntD virtualizes the\n * options so not all may options may be rendered in the DOM. If this is causing\n * you issues, please let #help-frontend know.\n */\nexport async function singleSelect(select: HTMLElement, option: string | RegExp): Promise<void> {\n  select = getRootElement(select);\n  await openMenu(select);\n  const optionsList = getOptionsList(select);\n  const optionItem = within(optionsList).getByText(option);\n  await userEvent.click(optionItem, { pointerEventsCheck: 0 });\n  // Menu automatically closes for a single <Select/> (no mode=\"multiple\")\n}\n\n/**\n * Clicks on the \"Clear\" button. In order for this function to work properly,\n * the `allowClear` prop must be set to `true`.\n */\nexport async function clearAll(select: HTMLElement): Promise<void> {\n  select = getRootElement(select);\n  const clearBtn = select.querySelector(`.${selectClasses.clear}`);\n  if (!clearBtn) {\n    throw queryHelpers.getElementError('Select not clearable', select);\n  }\n  await userEvent.click(clearBtn);\n}\n\n/**\n * Opens the dropdown menu, finds all of the options in the dropdown, closes\n * the menu, and returns a list of the text of each option in order.\n */\nexport async function getAllOptions(select: HTMLElement): Promise<string[]> {\n  select = getRootElement(select);\n  await openMenu(select);\n  const optionsList = getOptionsList(select);\n  const options: string[] = [];\n  optionsList.querySelectorAll(`.${selectClasses.option}`).forEach((option) => {\n    if (option.textContent === null) {\n      throw queryHelpers.getElementError('Option had no text content', option as HTMLElement);\n    }\n    options.push(option.textContent);\n  });\n  await closeMenu(select);\n  return options;\n}\n\n/**\n * Creates a new option for a Select with `mode=\"tags\"` by typing it into the input,\n * clicking on the option in the options list, and then closing the menu.\n */\nexport async function createNewOption(select: HTMLElement, option: string): Promise<void> {\n  select = getRootElement(select);\n  const selectInput = within(select).getByRole<HTMLInputElement>('combobox');\n  await userEvent.type(selectInput, option);\n  const optionsList = getOptionsList(select);\n  const optionItem = within(optionsList).getByText(option);\n  await userEvent.click(optionItem);\n  await closeMenu(select);\n}\n","/* eslint-disable @databricks/no-restricted-globals-with-module */\nimport { fireEvent, screen } from '@testing-library/react';\n\n// Helpers to get the selected option from the trigger\nconst getSelectedOptionLabelFromTrigger = (name?: string | RegExp): string | null => {\n  return screen.getByRole('combobox', { name }).textContent;\n};\n\nconst getSelectedOptionValueFromTrigger = (name?: string | RegExp): string | null => {\n  return screen.getByRole('combobox', { name }).getAttribute('value');\n};\n\nconst getSelectedOptionFromTrigger = (name?: string | RegExp): { label: string | null; value: string | null } => {\n  const label = getSelectedOptionLabelFromTrigger(name);\n  const value = getSelectedOptionValueFromTrigger(name);\n  return { label, value };\n};\n\nconst expectSelectedOptionFromTriggerToBe = (label: string | RegExp, name?: string | RegExp): void => {\n  expect(getSelectedOptionLabelFromTrigger(name)).toBe(label);\n};\n\nconst toggleSelect = (name?: string | RegExp): void => {\n  fireEvent.click(screen.getByRole('combobox', { name }));\n};\n\nconst expectSelectToBeOpen = (): void => {\n  expect(screen.queryAllByRole('option')).not.toHaveLength(0);\n};\n\nconst expectSelectToBeClosed = (): void => {\n  expect(screen.queryAllByRole('option')).toHaveLength(0);\n};\n\n// Generic helpers for when the select is open\nconst getOptionsLength = (): number => {\n  return screen.getAllByRole('option').length;\n};\n\nconst getAllOptions = (): (string | null)[] => {\n  return screen.getAllByRole('option').flatMap((option) => option.textContent);\n};\n\nconst expectOptionsLengthToBe = (length: number): void => {\n  expect(getOptionsLength()).toBe(length);\n};\n\nconst getUnselectedOption = (label: string | RegExp): HTMLElement => {\n  return screen.getByRole('option', { name: label, selected: false });\n};\n\nconst getSelectedOption = (label: string | RegExp): HTMLElement => {\n  return screen.getByRole('option', { name: label, selected: false });\n};\n\nconst getOption = (label: string | RegExp): HTMLElement => {\n  return screen.getByRole('option', { name: label });\n};\n\nconst selectOption = (label: string | RegExp): void => {\n  fireEvent.click(screen.getByRole('option', { name: label }));\n};\n\nconst expectSelectedOptionToBe = (label: string | RegExp): void => {\n  const options = screen.getAllByRole('option');\n  const selectedOption = options.find((option) => option.getAttribute('aria-selected') === 'true');\n  expect(selectedOption).toHaveTextContent(label);\n};\n\nexport const simpleSelectTestUtils = {\n  getSelectedOptionLabelFromTrigger,\n  getSelectedOptionValueFromTrigger,\n  getSelectedOptionFromTrigger,\n  expectSelectedOptionFromTriggerToBe,\n  toggleSelect,\n  expectSelectToBeOpen,\n  expectSelectToBeClosed,\n  getOptionsLength,\n  getAllOptions,\n  expectOptionsLengthToBe,\n  getUnselectedOption,\n  getSelectedOption,\n  getOption,\n  selectOption,\n  expectSelectedOptionToBe,\n};\n","import { queryHelpers, within } from '@testing-library/react';\n\nimport type { GetTableRowByCellTextOptions, RowIdentifier, TableRows } from '../common';\nimport { createMarkdownTable } from '../common';\n\nfunction getColumnHeaderIndex(tableElement: HTMLElement, columnHeaderName: string | RegExp): number {\n  const columnHeader = within(tableElement).getByRole('columnheader', { name: columnHeaderName });\n  const columnHeaderIndex = Array.from(columnHeader.parentElement?.children ?? []).indexOf(columnHeader);\n  return columnHeaderIndex;\n}\n\n/**\n * Returns the table row that contains the specified `cellText`. The `cellText`\n * must be in the column with name `columnHeaderName` if it is specified. Otherwise,\n * the `cellText` must be in the first column. Throws an error if either multiple\n * rows or no rows can be found that match the given options. Also throws an error\n * if the column with name `columnHeaderName` cannot be found.\n *\n * @param tableElement The HTMLElement representing the table to query in. This is likely\n * a `<div role=\"table\">` element, so it can be queried by `screen.getByRole('table')`.\n * @param cellText The cell text that uniquely identifies the row.\n * @param columnHeaderName The name of the column to search the text for. If not provided,\n * the first column will be used.\n */\nexport function getTableRowByCellText(\n  tableElement: HTMLElement,\n  cellText: string,\n  { columnHeaderName }: GetTableRowByCellTextOptions = {},\n): HTMLElement {\n  const columnHeaderIndex = columnHeaderName === undefined ? 0 : getColumnHeaderIndex(tableElement, columnHeaderName);\n\n  const matchingRows = within(tableElement)\n    .getAllByRole('row')\n    // Skip first row (table header)\n    .slice(1)\n    .filter((row) => {\n      const cells = within(row).getAllByRole('cell');\n      const cell = cells[columnHeaderIndex];\n      const cellContainsText = within(cell).queryByText(cellText) !== null;\n      return cellContainsText;\n    });\n\n  if (matchingRows.length === 0) {\n    throw queryHelpers.getElementError(\n      `Unable to find a table row with text \"${cellText}\" in the column \"${columnHeaderName}\"`,\n      tableElement,\n    );\n  }\n\n  if (matchingRows.length > 1) {\n    throw queryHelpers.getElementError(\n      `Found multiple table rows with text \"${cellText}\" in the column \"${columnHeaderName}\"`,\n      tableElement,\n    );\n  }\n\n  return matchingRows[0];\n}\n\n/**\n * Converts a Du Bois table to a markdown table string. This means that each cell\n * is separated by a pipe (including the edges), the header row is on its own line\n * at the top, each data row is on its own line below, and the header row is separated\n * by a row of dashes from the data rows. This is useful for checking table contents\n * in tests.\n *\n * @param tableElement The HTMLElement representing the table to query in. This is likely\n * a `<div role=\"table\">` element, so it can be queried by `screen.getByRole('table')`.\n *\n * @example\n * The HTML table:\n * ```jsx\n *   <Table>\n *     <TableRow isHeader>\n *       <TableHeader>Name</TableHeader>\n *       <TableHeader>Fruit</TableHeader>\n *     </TableRow>\n *     <TableRow>\n *       <TableCell>Alice</TableCell>\n *       <TableCell>Apple</TableCell>\n *     </TableRow>\n *     <TableRow>\n *       <TableCell>Brady</TableCell>\n *       <TableCell>Banana</TableCell>\n *     </TableRow>\n *   </Table>\n * ```\n *\n * The Markdown table:\n * ```md\n *   | Name | Fruit |\n *   | --- | --- |\n *   | Alice | Apple |\n *   | Brady | Banana |\n * ```\n */\nexport function toMarkdownTable(tableElement: HTMLElement): string {\n  const { bodyRows, headerRow } = getTableRows(tableElement);\n  const columns = within(headerRow)\n    .getAllByRole('columnheader')\n    .map((column) => column.textContent ?? '');\n  const rows = bodyRows.map((row) =>\n    within(row)\n      .getAllByRole('cell')\n      .map((cell) => cell.textContent ?? ''),\n  );\n  return createMarkdownTable(columns, rows);\n}\n\n/**\n * Returns the header row and all body rows (non-header rows) in order. Assumes that the\n * `tableElement` has a single header row (as the first row) and the rest of the rows are\n * body rows.\n *\n * @param tableElement The HTMLElement representing the table to query in. This is likely\n * a `<div role=\"table\">` element, so it can be queried by `screen.getByRole('table')`.\n */\nexport function getTableRows(tableElement: HTMLElement): TableRows<HTMLElement> {\n  const [firstRow, ...restRows] = within(tableElement).getAllByRole('row');\n  return {\n    bodyRows: restRows,\n    headerRow: firstRow,\n  };\n}\n\n/**\n * Returns the table cell in the specified table row corresponding to the given\n * `columnHeaderName`. This is useful for checking that a row has a particular value\n * for a given column, especially when there are duplicate values in the column.\n *\n * @example\n * The HTML table:\n * ```jsx\n *   <Table>\n *     <TableRow isHeader>\n *       <TableHeader>Name</TableHeader>\n *       <TableHeader>Age</TableHeader>\n *     </TableRow>\n *     <TableRow>\n *       <TableCell>Alex</TableCell>\n *       <TableCell>25</TableCell>\n *     </TableRow>\n *     <TableRow>\n *       <TableCell>Brenda</TableCell>\n *       <TableCell>39</TableCell>\n *     </TableRow>\n *     <TableRow>\n *       <TableCell>Carlos</TableCell>\n *       <TableCell>39</TableCell>\n *     </TableRow>\n *   </Table>\n * ```\n *\n * ```js\n * const table = screen.getByRole('table');\n * const result = getTableCellInRow(table, { cellText: 'Carlos' }, 'Age');\n * expect(result.textContent).toEqual('39');\n * ```\n */\nexport function getTableCellInRow(\n  tableElement: HTMLElement,\n  row: RowIdentifier,\n  columnHeaderName: string | RegExp,\n): HTMLElement {\n  const tableRowElement = getTableRowByCellText(tableElement, row.cellText, { columnHeaderName: row.columnHeaderName });\n  const columnHeaderIndex = getColumnHeaderIndex(tableElement, columnHeaderName);\n  const cells = within(tableRowElement).getAllByRole('cell');\n  const cell = cells[columnHeaderIndex];\n  return cell;\n}\n","import userEvent from '@testing-library/user-event';\n\nexport * as select from './select';\nexport * as selectEvent from './selectEvent';\nexport { simpleSelectTestUtils } from './simpleSelect.utils';\n\nexport * from './table';\n\n/**\n * Opens the dropdown menu by clicking on the dropdown button.\n *\n * @param dropdownButton - The Dropdown Trigger button that opens the menu when clicked.\n */\nexport const openDropdownMenu = async (dropdownButton: HTMLElement) => {\n  await userEvent.type(dropdownButton, '{arrowdown}');\n};\n"],"names":["normalizeText","text","replace","trim","getDisplayLabel","combobox","textContent","getListbox","id","getAttribute","queryHelpers","getElementError","listbox","ownerDocument","getElementById","body","getOptions","within","getAllByRole","getOptionNames","options","map","option","computeAccessibleName","getRootElement","element","closest","selectClasses","selector","parentElement","classList","contains","Error","getOptionsList","select","input","getByRole","listId","optionsList","querySelector","list","openMenu","open","userEvent","click","pointerEventsCheck","waitFor","closeMenu","getLabelText","removeMultiSelectOption","optionItem","getByText","item","removeItem","multiSelect","i","length","singleSelect","clearAll","clearBtn","clear","getAllOptions","querySelectorAll","forEach","push","createNewOption","selectInput","type","getSelectedOptionLabelFromTrigger","name","screen","getSelectedOptionValueFromTrigger","getSelectedOptionFromTrigger","label","value","expectSelectedOptionFromTriggerToBe","expect","toBe","toggleSelect","fireEvent","expectSelectToBeOpen","queryAllByRole","not","toHaveLength","expectSelectToBeClosed","getOptionsLength","flatMap","expectOptionsLengthToBe","getUnselectedOption","selected","getSelectedOption","getOption","selectOption","expectSelectedOptionToBe","selectedOption","find","toHaveTextContent","simpleSelectTestUtils","getColumnHeaderIndex","tableElement","columnHeaderName","columnHeader","columnHeaderIndex","Array","from","children","indexOf","getTableRowByCellText","cellText","undefined","matchingRows","slice","filter","row","cells","cell","cellContainsText","queryByText","toMarkdownTable","bodyRows","headerRow","getTableRows","columns","column","rows","createMarkdownTable","firstRow","restRows","getTableCellInRow","tableRowElement","openDropdownMenu","dropdownButton"],"mappings":"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"}