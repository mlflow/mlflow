{"version":3,"file":"rtl.js","sources":["../../src/test-utils/rtl/select.ts","../../src/test-utils/rtl/selectEvent.ts","../../src/test-utils/rtl/simpleSelect.utils.ts","../../src/test-utils/rtl/table.ts","../../src/test-utils/rtl/index.ts"],"sourcesContent":["import { queryHelpers, within } from '@testing-library/react';\nimport { computeAccessibleName } from 'dom-accessibility-api';\n\nfunction normalizeText(text: string): string {\n  return text.replace(/\\s+/g, ' ').trim();\n}\n\n/**\n * Extracts the display label from a combobox — equivalent to the selected\n * option's label.\n */\nexport function getDisplayLabel(combobox: HTMLElement): string {\n  return normalizeText(combobox.textContent ?? '');\n}\n\n/**\n * Finds the associated listbox for a combobox.\n *\n * @usage\n *\n * ```tsx\n * const combobox = screen.getByRole('combobox', { name: '…' });\n * await userEvent.click(combobox);\n * const listbox = select.getListbox(combobox);\n * await userEvent.click(within(listbox).getByRole('option', { name: '…' }));\n * ```\n */\nexport function getListbox(combobox: HTMLElement): HTMLElement {\n  const id = combobox.getAttribute('aria-controls');\n  if (!id) {\n    throw queryHelpers.getElementError(\n      \"This doesn't appear to be a combobox. Make sure you're querying the right element: `ByRole('combobox', { name: '…' })`\",\n      combobox,\n    );\n  }\n  const listbox = combobox.ownerDocument.getElementById(id);\n  if (!listbox) {\n    throw queryHelpers.getElementError(\n      \"Can't find the listbox. Are you sure the select has been opened? `await userEvent.click(combobox)`\",\n      combobox.ownerDocument.body,\n    );\n  }\n  return listbox;\n}\n\n/**\n * Returns all options associated with a combobox (requires the select to have\n * been opened).\n */\nexport function getOptions(combobox: HTMLElement): HTMLElement[] {\n  const listbox = getListbox(combobox);\n  return within(listbox).getAllByRole('option');\n}\n\n/**\n * Returns the accessible name for each option in a combobox.\n */\nexport function getOptionNames(combobox: HTMLElement): string[] {\n  const options = getOptions(combobox);\n  return options.map((option) => computeAccessibleName(option));\n}\n","import { queryHelpers, waitFor, within } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event-14';\n\nimport { selectClasses } from '../common';\n\n/**\n * Allows the helpers in this module to be used when the select element is\n * queried _semantically_ (as if it were a native <select> element) - i.e.\n * `ByRole('combobox', { name: '...' })`, rather than by test ID.\n *\n * Also checks if <DesignSystemProvider> was used, because many of the helpers\n * in this module query by class name starting with \"du-bois-\", which requires\n * the provider.\n */\nfunction getRootElement(element: HTMLElement): HTMLElement {\n  if (element.getAttribute('role') === 'combobox') {\n    element = element.closest(`.${selectClasses.selector}`)!.parentElement!;\n  }\n  if (element.classList.contains('ant-select')) {\n    throw new Error('Component must be wrapped by <DesignSystemProvider>');\n  }\n  return element;\n}\n\nfunction getOptionsList(select: HTMLElement): HTMLElement {\n  const body = select.ownerDocument.body;\n  const input = within(select).getByRole('combobox');\n  const listId = input.getAttribute('aria-owns') || input.getAttribute('aria-controls');\n  if (!listId) {\n    throw queryHelpers.getElementError('Options input does not control an options list', body);\n  }\n\n  const listbox = select.ownerDocument.getElementById(listId);\n  if (!listbox?.parentElement) {\n    throw queryHelpers.getElementError('Options listbox does not have a parent', body);\n  }\n\n  const optionsList = listbox.parentElement.querySelector<HTMLElement>(`.${selectClasses.list}`);\n  if (!optionsList) {\n    throw queryHelpers.getElementError('Options list not found', body);\n  }\n\n  return optionsList;\n}\n\n/**\n * Opens the dropdown menu for the <Select/> by clicking. Will throw an error if\n * the menu is already opened or if the menu is unable to be opened.\n */\nexport async function openMenu(select: HTMLElement): Promise<void> {\n  select = getRootElement(select);\n  if (select.classList.contains(selectClasses.open)) {\n    throw queryHelpers.getElementError('Select is already open', select);\n  }\n  const selector = select.querySelector(`.${selectClasses.selector}`);\n  if (!selector) {\n    throw queryHelpers.getElementError('Selector not found', select);\n  }\n  await userEvent.click(selector, { pointerEventsCheck: 0 });\n  await waitFor(() => {\n    if (!select.classList.contains(selectClasses.open)) {\n      throw queryHelpers.getElementError('Select did not open', select);\n    }\n  });\n}\n\n/**\n * Closes the dropdown menu for the <Select/> by clicking. Will throw an error if\n * the menu is already closed or if the menu is unable to be closed.\n */\nexport async function closeMenu(select: HTMLElement): Promise<void> {\n  select = getRootElement(select);\n  if (!select.classList.contains(selectClasses.open)) {\n    throw queryHelpers.getElementError('Select is already closed', select);\n  }\n  const selector = select.querySelector(`.${selectClasses.selector}`);\n  if (!selector) {\n    throw queryHelpers.getElementError('Selector not found', select);\n  }\n  await userEvent.click(selector, { pointerEventsCheck: 0 });\n  await waitFor(() => {\n    if (select.classList.contains(selectClasses.open)) {\n      throw queryHelpers.getElementError('Select did not close', select);\n    }\n  });\n}\n\n/**\n * Returns a string concatenating the labels for all selected options.\n */\nexport function getLabelText(select: HTMLElement): string {\n  select = getRootElement(select);\n  const selector = select.querySelector(`.${selectClasses.selector}`);\n  if (!selector) {\n    throw queryHelpers.getElementError('Selector not found', select);\n  }\n  // Trim the text to avoid weird whitespace issues non-label elements being added.\n  // For example, the input mirror is an empty span with some whitespace that is\n  // nested under the selector but does not show up in the label text.\n  return selector.textContent?.trim() ?? '';\n}\n\n/**\n * Removes the `option` by clicking its \"X\" button. Can only be used with a <Select/>\n * component with `mode=\"multiple\"`. The provided strings must match the option label\n * exactly.\n */\nexport async function removeMultiSelectOption(select: HTMLElement, option: string): Promise<void> {\n  select = getRootElement(select);\n  const selector = select.querySelector<HTMLElement>(`.${selectClasses.selector}`);\n  if (!selector) {\n    throw queryHelpers.getElementError('Selector not found', select);\n  }\n  const optionItem = within(selector).getByText(option).closest(`.${selectClasses.item}`);\n  if (optionItem === null) {\n    throw queryHelpers.getElementError(`Option \"${option}\" not found`, select);\n  }\n  const removeItem = optionItem.querySelector(`.${selectClasses.removeItem}`);\n  if (removeItem === null) {\n    throw queryHelpers.getElementError(`Remove button for option \"${option}\" not found`, optionItem as HTMLElement);\n  }\n  await userEvent.click(removeItem);\n}\n\n/**\n * Selects options from the dropdown menu for a <Select/> component with `mode=\"multiple\"`.\n * The provided strings must match the option labels exactly. There is a known\n * limitation for lists that are extremely long because AntD virtualizes the\n * options so not all may options may be rendered in the DOM. If this is causing\n * you issues, please let #help-frontend know.\n */\nexport async function multiSelect(select: HTMLElement, options: (string | RegExp)[]): Promise<void> {\n  select = getRootElement(select);\n  await openMenu(select);\n  const optionsList = getOptionsList(select);\n  for (let i = 0; i < options.length; i++) {\n    const option = options[i];\n    const optionItem = within(optionsList).getByText(option);\n    await userEvent.click(optionItem, { pointerEventsCheck: 0 });\n  }\n  // Close the menu to indicate that selection has finished\n  await closeMenu(select);\n}\n\n/**\n * Selects options from the dropdown menu for a <Select/> component without a\n * mode. The provided string must match an option label exactly. There is a known\n * limitation for lists that are extremely long because AntD virtualizes the\n * options so not all may options may be rendered in the DOM. If this is causing\n * you issues, please let #help-frontend know.\n */\nexport async function singleSelect(select: HTMLElement, option: string | RegExp): Promise<void> {\n  select = getRootElement(select);\n  await openMenu(select);\n  const optionsList = getOptionsList(select);\n  const optionItem = within(optionsList).getByText(option);\n  await userEvent.click(optionItem, { pointerEventsCheck: 0 });\n  // Menu automatically closes for a single <Select/> (no mode=\"multiple\")\n}\n\n/**\n * Clicks on the \"Clear\" button. In order for this function to work properly,\n * the `allowClear` prop must be set to `true`.\n */\nexport async function clearAll(select: HTMLElement): Promise<void> {\n  select = getRootElement(select);\n  const clearBtn = select.querySelector(`.${selectClasses.clear}`);\n  if (!clearBtn) {\n    throw queryHelpers.getElementError('Select not clearable', select);\n  }\n  await userEvent.click(clearBtn);\n}\n\n/**\n * Opens the dropdown menu, finds all of the options in the dropdown, closes\n * the menu, and returns a list of the text of each option in order.\n */\nexport async function getAllOptions(select: HTMLElement): Promise<string[]> {\n  select = getRootElement(select);\n  await openMenu(select);\n  const optionsList = getOptionsList(select);\n  const options: string[] = [];\n  optionsList.querySelectorAll(`.${selectClasses.option}`).forEach((option) => {\n    if (option.textContent === null) {\n      throw queryHelpers.getElementError('Option had no text content', option as HTMLElement);\n    }\n    options.push(option.textContent);\n  });\n  await closeMenu(select);\n  return options;\n}\n\n/**\n * Creates a new option for a Select with `mode=\"tags\"` by typing it into the input,\n * clicking on the option in the options list, and then closing the menu.\n */\nexport async function createNewOption(select: HTMLElement, option: string): Promise<void> {\n  select = getRootElement(select);\n  const selectInput = within(select).getByRole<HTMLInputElement>('combobox');\n  await userEvent.type(selectInput, option);\n  const optionsList = getOptionsList(select);\n  const optionItem = within(optionsList).getByText(option);\n  await userEvent.click(optionItem);\n  await closeMenu(select);\n}\n","/* eslint-disable @databricks/no-restricted-globals-with-module */\nimport { fireEvent, screen } from '@testing-library/react';\n\n// Helpers to get the selected option from the trigger\nconst getSelectedOptionLabelFromTrigger = (name?: string | RegExp): string | null => {\n  return screen.getByRole('combobox', { name }).textContent;\n};\n\nconst getSelectedOptionValueFromTrigger = (name?: string | RegExp): string | null => {\n  return screen.getByRole('combobox', { name }).getAttribute('value');\n};\n\nconst getSelectedOptionFromTrigger = (name?: string | RegExp): { label: string | null; value: string | null } => {\n  const label = getSelectedOptionLabelFromTrigger(name);\n  const value = getSelectedOptionValueFromTrigger(name);\n  return { label, value };\n};\n\nconst expectSelectedOptionFromTriggerToBe = (label: string | RegExp, name?: string | RegExp): void => {\n  expect(getSelectedOptionLabelFromTrigger(name)).toBe(label);\n};\n\nconst toggleSelect = (name?: string | RegExp): void => {\n  fireEvent.click(screen.getByRole('combobox', { name }));\n};\n\nconst expectSelectToBeOpen = (): void => {\n  expect(screen.queryAllByRole('option')).not.toHaveLength(0);\n};\n\nconst expectSelectToBeClosed = (): void => {\n  expect(screen.queryAllByRole('option')).toHaveLength(0);\n};\n\n// Generic helpers for when the select is open\nconst getOptionsLength = (): number => {\n  return screen.getAllByRole('option').length;\n};\n\nconst getAllOptions = (): (string | null)[] => {\n  return screen.getAllByRole('option').flatMap((option) => option.textContent);\n};\n\nconst expectOptionsLengthToBe = (length: number): void => {\n  expect(getOptionsLength()).toBe(length);\n};\n\nconst getUnselectedOption = (label: string | RegExp): HTMLElement => {\n  return screen.getByRole('option', { name: label, selected: false });\n};\n\nconst getSelectedOption = (label: string | RegExp): HTMLElement => {\n  return screen.getByRole('option', { name: label, selected: false });\n};\n\nconst getOption = (label: string | RegExp): HTMLElement => {\n  return screen.getByRole('option', { name: label });\n};\n\nconst selectOption = (label: string | RegExp): void => {\n  fireEvent.click(screen.getByRole('option', { name: label }));\n};\n\nconst expectSelectedOptionToBe = (label: string | RegExp): void => {\n  const options = screen.getAllByRole('option');\n  const selectedOption = options.find((option) => option.getAttribute('aria-selected') === 'true');\n  expect(selectedOption).toHaveTextContent(label);\n};\n\nexport const simpleSelectTestUtils = {\n  getSelectedOptionLabelFromTrigger,\n  getSelectedOptionValueFromTrigger,\n  getSelectedOptionFromTrigger,\n  expectSelectedOptionFromTriggerToBe,\n  toggleSelect,\n  expectSelectToBeOpen,\n  expectSelectToBeClosed,\n  getOptionsLength,\n  getAllOptions,\n  expectOptionsLengthToBe,\n  getUnselectedOption,\n  getSelectedOption,\n  getOption,\n  selectOption,\n  expectSelectedOptionToBe,\n};\n","import { queryHelpers, within } from '@testing-library/react';\n\nimport type { GetTableRowByCellTextOptions, RowIdentifier, TableRows } from '../common';\nimport { createMarkdownTable } from '../common';\n\nfunction getColumnHeaderIndex(tableElement: HTMLElement, columnHeaderName: string | RegExp): number {\n  const columnHeader = within(tableElement).getByRole('columnheader', { name: columnHeaderName });\n  const columnHeaderIndex = Array.from(columnHeader.parentElement?.children ?? []).indexOf(columnHeader);\n  return columnHeaderIndex;\n}\n\n/**\n * Returns the table row that contains the specified `cellText`. The `cellText`\n * must be in the column with name `columnHeaderName` if it is specified. Otherwise,\n * the `cellText` must be in the first column. Throws an error if either multiple\n * rows or no rows can be found that match the given options. Also throws an error\n * if the column with name `columnHeaderName` cannot be found.\n *\n * @param tableElement The HTMLElement representing the table to query in. This is likely\n * a `<div role=\"table\">` element, so it can be queried by `screen.getByRole('table')`.\n * @param cellText The cell text that uniquely identifies the row.\n * @param columnHeaderName The name of the column to search the text for. If not provided,\n * the first column will be used.\n */\nexport function getTableRowByCellText(\n  tableElement: HTMLElement,\n  cellText: string,\n  { columnHeaderName }: GetTableRowByCellTextOptions = {},\n): HTMLElement {\n  const columnHeaderIndex = columnHeaderName === undefined ? 0 : getColumnHeaderIndex(tableElement, columnHeaderName);\n\n  const matchingRows = within(tableElement)\n    .getAllByRole('row')\n    // Skip first row (table header)\n    .slice(1)\n    .filter((row) => {\n      const cells = within(row).getAllByRole('cell');\n      const cell = cells[columnHeaderIndex];\n      const cellContainsText = within(cell).queryByText(cellText) !== null;\n      return cellContainsText;\n    });\n\n  if (matchingRows.length === 0) {\n    throw queryHelpers.getElementError(\n      `Unable to find a table row with text \"${cellText}\" in the column \"${columnHeaderName}\"`,\n      tableElement,\n    );\n  }\n\n  if (matchingRows.length > 1) {\n    throw queryHelpers.getElementError(\n      `Found multiple table rows with text \"${cellText}\" in the column \"${columnHeaderName}\"`,\n      tableElement,\n    );\n  }\n\n  return matchingRows[0];\n}\n\n/**\n * Converts a Du Bois table to a markdown table string. This means that each cell\n * is separated by a pipe (including the edges), the header row is on its own line\n * at the top, each data row is on its own line below, and the header row is separated\n * by a row of dashes from the data rows. This is useful for checking table contents\n * in tests.\n *\n * @param tableElement The HTMLElement representing the table to query in. This is likely\n * a `<div role=\"table\">` element, so it can be queried by `screen.getByRole('table')`.\n *\n * @example\n * The HTML table:\n * ```jsx\n *   <Table>\n *     <TableRow isHeader>\n *       <TableHeader>Name</TableHeader>\n *       <TableHeader>Fruit</TableHeader>\n *     </TableRow>\n *     <TableRow>\n *       <TableCell>Alice</TableCell>\n *       <TableCell>Apple</TableCell>\n *     </TableRow>\n *     <TableRow>\n *       <TableCell>Brady</TableCell>\n *       <TableCell>Banana</TableCell>\n *     </TableRow>\n *   </Table>\n * ```\n *\n * The Markdown table:\n * ```md\n *   | Name | Fruit |\n *   | --- | --- |\n *   | Alice | Apple |\n *   | Brady | Banana |\n * ```\n */\nexport function toMarkdownTable(tableElement: HTMLElement): string {\n  const { bodyRows, headerRow } = getTableRows(tableElement);\n  const columns = within(headerRow)\n    .getAllByRole('columnheader')\n    .map((column) => column.textContent ?? '');\n  const rows = bodyRows.map((row) =>\n    within(row)\n      .getAllByRole('cell')\n      .map((cell) => cell.textContent ?? ''),\n  );\n  return createMarkdownTable(columns, rows);\n}\n\n/**\n * Returns the header row and all body rows (non-header rows) in order. Assumes that the\n * `tableElement` has a single header row (as the first row) and the rest of the rows are\n * body rows.\n *\n * @param tableElement The HTMLElement representing the table to query in. This is likely\n * a `<div role=\"table\">` element, so it can be queried by `screen.getByRole('table')`.\n */\nexport function getTableRows(tableElement: HTMLElement): TableRows<HTMLElement> {\n  const [firstRow, ...restRows] = within(tableElement).getAllByRole('row');\n  return {\n    bodyRows: restRows,\n    headerRow: firstRow,\n  };\n}\n\n/**\n * Returns the table cell in the specified table row corresponding to the given\n * `columnHeaderName`. This is useful for checking that a row has a particular value\n * for a given column, especially when there are duplicate values in the column.\n *\n * @example\n * The HTML table:\n * ```jsx\n *   <Table>\n *     <TableRow isHeader>\n *       <TableHeader>Name</TableHeader>\n *       <TableHeader>Age</TableHeader>\n *     </TableRow>\n *     <TableRow>\n *       <TableCell>Alex</TableCell>\n *       <TableCell>25</TableCell>\n *     </TableRow>\n *     <TableRow>\n *       <TableCell>Brenda</TableCell>\n *       <TableCell>39</TableCell>\n *     </TableRow>\n *     <TableRow>\n *       <TableCell>Carlos</TableCell>\n *       <TableCell>39</TableCell>\n *     </TableRow>\n *   </Table>\n * ```\n *\n * ```js\n * const table = screen.getByRole('table');\n * const result = getTableCellInRow(table, { cellText: 'Carlos' }, 'Age');\n * expect(result.textContent).toEqual('39');\n * ```\n */\nexport function getTableCellInRow(\n  tableElement: HTMLElement,\n  row: RowIdentifier,\n  columnHeaderName: string | RegExp,\n): HTMLElement {\n  const tableRowElement = getTableRowByCellText(tableElement, row.cellText, { columnHeaderName: row.columnHeaderName });\n  const columnHeaderIndex = getColumnHeaderIndex(tableElement, columnHeaderName);\n  const cells = within(tableRowElement).getAllByRole('cell');\n  const cell = cells[columnHeaderIndex];\n  return cell;\n}\n","import userEvent from '@testing-library/user-event-14';\n\nexport * as select from './select';\nexport * as selectEvent from './selectEvent';\nexport { simpleSelectTestUtils } from './simpleSelect.utils';\n\nexport * from './table';\n\n/**\n * Opens the dropdown menu by clicking on the dropdown button.\n *\n * @param dropdownButton - The Dropdown Trigger button that opens the menu when clicked.\n */\nexport const openDropdownMenu = async (dropdownButton: HTMLElement) => {\n  await userEvent.type(dropdownButton, '{arrowdown}');\n};\n"],"names":["normalizeText","text","replace","trim","getDisplayLabel","combobox","_combobox$textContent","textContent","getListbox","id","getAttribute","queryHelpers","getElementError","listbox","ownerDocument","getElementById","body","getOptions","within","getAllByRole","getOptionNames","options","map","option","computeAccessibleName","getRootElement","element","closest","selectClasses","selector","parentElement","classList","contains","Error","getOptionsList","select","input","getByRole","listId","optionsList","querySelector","list","openMenu","open","userEvent","click","pointerEventsCheck","waitFor","closeMenu","getLabelText","_selector$textContent","_selector$textContent2","removeMultiSelectOption","optionItem","getByText","item","removeItem","multiSelect","i","length","singleSelect","clearAll","clearBtn","clear","getAllOptions","querySelectorAll","forEach","push","createNewOption","selectInput","type","getSelectedOptionLabelFromTrigger","name","screen","getSelectedOptionValueFromTrigger","getSelectedOptionFromTrigger","label","value","expectSelectedOptionFromTriggerToBe","expect","toBe","toggleSelect","fireEvent","expectSelectToBeOpen","queryAllByRole","not","toHaveLength","expectSelectToBeClosed","getOptionsLength","flatMap","expectOptionsLengthToBe","getUnselectedOption","selected","getSelectedOption","getOption","selectOption","expectSelectedOptionToBe","selectedOption","find","toHaveTextContent","simpleSelectTestUtils","getColumnHeaderIndex","tableElement","columnHeaderName","_columnHeader$parentE","_columnHeader$parentE2","columnHeader","columnHeaderIndex","Array","from","children","indexOf","getTableRowByCellText","cellText","arguments","undefined","matchingRows","slice","filter","row","cells","cell","cellContainsText","queryByText","toMarkdownTable","bodyRows","headerRow","getTableRows","columns","column","_column$textContent","rows","_cell$textContent","createMarkdownTable","firstRow","restRows","getTableCellInRow","tableRowElement","openDropdownMenu","dropdownButton"],"mappings":"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"}