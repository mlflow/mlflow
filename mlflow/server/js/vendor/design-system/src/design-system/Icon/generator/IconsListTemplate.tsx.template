import { useMemo } from 'react';

import { List } from '../../../List/List';
import type { IconProps } from '../../Icon';
import { IconDescriptor } from '../../stories/utils/IconDescriptor';
import * as Icons from '../icons';

export interface IconsListProps {
  iconProps: IconProps;
  search: string;
}

/*
const icons = [
  {
    Icon: Icons.YourIcon,
    name: "YourIcon",
    aliases: [],
  },
];
 */
const icons = [
  /* CONTENT HERE */
];

const experimentalIcons: any[] = ['MenuIcon'];

export function IconsList({ iconProps, search }: IconsListProps): JSX.Element {
  const filteredAndSortedIcons = useMemo(() => {
    const input = search.trim().toLowerCase().replace(/\s/g, '');
    if (!input.trim()) {
      return icons;
    }

    const priority = icons
      .map((icon) => {
        const exactMatch = icon.name.toLowerCase() === input;
        const nameMatch = icon.name.toLowerCase().includes(input);
        const aliasMatch = icon.aliases.some((alias) => {
          return alias.replace(/\s/g, '').toLowerCase().includes(input);
        });

        if (!exactMatch && !nameMatch && !aliasMatch) {
          return null;
        }

        return {
          icon,
          priority: exactMatch ? 1 : nameMatch ? 2 : 3,
        };
      })
      .filter(Boolean) as { icon: any, priority: number}[];

    priority.sort((a, b) => {
      if (a.priority === b.priority) {
        return a.icon.name.localeCompare(b.icon.name);
      }

      return a.priority - b.priority;
    });

    return priority.map((item) => item.icon);
  }, [search]);

  return (
      <List
        grid={{ gutter: 16, column: 4 }}
        dataSource={filteredAndSortedIcons}
        renderItem={(item, key) => ([          
          <List.Item key={`${key}`}>
            <IconDescriptor icon={<item.Icon {...iconProps} />} name={item.name} experimental={experimentalIcons.includes(item.name)} />            
          </List.Item>
        ])}
      />
  );
}
