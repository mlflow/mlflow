import fs from 'fs';
import path from 'path';

import { flattenTokens, stringifyTokens } from './common';
import darkModeTokens from '../../src/theme/tokens/semantics.dark_mode.json';
import lightModeTokens from '../../src/theme/tokens/semantics.light_mode.json';

// Adding a token top-level section to this array will make it protected / not available for public use.
const protectedTokens = ['Tag'];

function filterProtectedTokens(tokens: any) {
  const publicTokens = { ...tokens };
  const privateTokens = {};

  for (const token of protectedTokens) {
    if (publicTokens[token]) {
      privateTokens[token] = publicTokens[token];
      delete publicTokens[token];
    }
  }

  return { publicTokens, privateTokens };
}

const generatedDir = process.env.THEME_GENERATED_DIR || path.resolve(__dirname, '../../src/theme/_generated');

// eslint-disable-next-line no-console -- TODO(FEINF-3587)
console.log('Generating SemanticColors-Dark.ts...');

const { publicTokens: darkPublicTokens, privateTokens: darkPrivateTokens } = filterProtectedTokens(darkModeTokens);

const flattenedDarkModeTokens = flattenTokens(darkPublicTokens);
const finalFileDark = `
// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import { primitiveColors as primitives } from './PrimitiveColors';
import type { ValidSemanticColors } from './ValidSemanticColors';

export const darkColorList: Record<ValidSemanticColors, string> = ${stringifyTokens(flattenedDarkModeTokens)};
`;

const filePathDark = path.join(generatedDir, 'SemanticColors-Dark.ts');
fs.writeFileSync(filePathDark, finalFileDark);

// eslint-disable-next-line no-console -- TODO(FEINF-3587)
console.log('Generating SemanticColors-Light.ts...');

const { publicTokens: lightPublicTokens, privateTokens: lightPrivateTokens } = filterProtectedTokens(lightModeTokens);

const flattenedLightModeTokens = flattenTokens(lightPublicTokens);
const finalFileLight = `
// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import { primitiveColors as primitives } from './PrimitiveColors';
import type { ValidSemanticColors } from './ValidSemanticColors';

export const lightColorList: Record<ValidSemanticColors, string> = ${stringifyTokens(flattenedLightModeTokens)};
`;

const filePathLight = path.join(generatedDir, 'SemanticColors-Light.ts');
fs.writeFileSync(filePathLight, finalFileLight);

// eslint-disable-next-line no-console -- TODO(FEINF-3587)
console.log('Generating ProtectedSemanticColors.ts...');

const flattenedDarkPrivateTokens = flattenTokens(darkPrivateTokens);
const flattenedLightPrivateTokens = flattenTokens(lightPrivateTokens);

const finalFileProtected = `
// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import { primitiveColors as primitives } from './PrimitiveColors';

export const darkProtectedColorList = ${stringifyTokens(flattenedDarkPrivateTokens)};

export const lightProtectedColorList = ${stringifyTokens(flattenedLightPrivateTokens)};
`;

const filePathProtected = path.join(generatedDir, 'ProtectedSemanticColors.ts');
fs.writeFileSync(filePathProtected, finalFileProtected);
