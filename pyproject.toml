[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "mlflow"
version = "2.14.1"
description = "MLflow is an open source platform for the complete machine learning lifecycle"
readme = "README.rst"
keywords = ["mlflow", "ai", "databricks"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Intended Audience :: End Users/Desktop",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Information Technology",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.8",
]
requires-python = ">=3.8"
dependencies = [
  "Flask<4",
  "Jinja2<4,>=2.11; platform_system != 'Windows'",
  "Jinja2<4,>=3.0; platform_system == 'Windows'",
  "alembic<2,!=1.10.0",
  "cachetools<6,>=5.0.0",
  "click<9,>=7.0",
  "cloudpickle<4",
  "docker<8,>=4.0.0",
  "entrypoints<1",
  "gitpython<4,>=3.1.9",
  "graphene<4",
  "gunicorn<23; platform_system != 'Windows'",
  "importlib_metadata<8,>=3.7.0,!=4.7.0",
  "markdown<4,>=3.3",
  "matplotlib<4",
  "numpy<2",
  "opentelemetry-api<3,>=1.9.0",
  "opentelemetry-sdk<3,>=1.9.0",
  "packaging<25",
  "pandas<3",
  "protobuf<5,>=3.12.0",
  "pyarrow<16,>=4.0.0",
  "pytz<2025",
  "pyyaml<7,>=5.1",
  "querystring_parser<2",
  "requests<3,>=2.17.3",
  "scikit-learn<2",
  "scipy<2",
  "sqlalchemy<3,>=1.4.0",
  "sqlparse<1,>=0.4.0",
  "waitress<4; platform_system == 'Windows'",
]
[[project.maintainers]]
name = "Databricks"
email = "mlflow-oss-maintainers@googlegroups.com "

[project.license]
file = "LICENSE.txt"

[project.optional-dependencies]
extras = [
  "pyarrow",
  "requests-auth-aws-sigv4",
  "boto3",
  "botocore",
  "google-cloud-storage>=1.30.0",
  "azureml-core>=1.2.0",
  "pysftp",
  "kubernetes",
  "mlserver>=1.2.0,!=1.3.1,<1.4.0",
  "mlserver-mlflow>=1.2.0,!=1.3.1,<1.4.0",
  "virtualenv",
  "prometheus-flask-exporter",
]
databricks = [
  "azure-storage-file-datalake>12",
  "google-cloud-storage>=1.30.0",
  "boto3>1",
  "botocore",
]
gateway = [
  "pydantic<3,>=1.0",
  "fastapi<1",
  "uvicorn[standard]<1",
  "watchfiles<1",
  "aiohttp<4",
  "boto3<2,>=1.28.56",
  "tiktoken<1",
  "slowapi<1,>=0.1.9",
]
genai = [
  "pydantic<3,>=1.0",
  "fastapi<1",
  "uvicorn[standard]<1",
  "watchfiles<1",
  "aiohttp<4",
  "boto3<2,>=1.28.56",
  "tiktoken<1",
  "slowapi<1,>=0.1.9",
]
sqlserver = ["mlflow-dbstore"]
aliyun-oss = ["aliyunstoreplugin"]
xethub = ["mlflow-xethub"]
jfrog = ["mlflow-jfrog-plugin"]
langchain = ["langchain>=0.1.0,<=0.2.3"]

[project.urls]
homepage = "https://mlflow.org"
issues = "https://github.com/mlflow/mlflow/issues"
documentation = "https://mlflow.org/docs/latest/index.html"
repository = "https://github.com/mlflow/mlflow"

[project.scripts]
mlflow = "mlflow.cli:cli"

[project.entry-points."mlflow.app"]
basic-auth = "mlflow.server.auth:create_app"

[project.entry-points."mlflow.app.client"]
basic-auth = "mlflow.server.auth.client:AuthServiceClient"

[project.entry-points."mlflow.deployments"]
databricks = "mlflow.deployments.databricks"
http = "mlflow.deployments.mlflow"
https = "mlflow.deployments.mlflow"
openai = "mlflow.deployments.openai"

[tool.setuptools.package-data]
mlflow = [
  "store/db_migrations/alembic.ini",
  "temporary_db_migrations_for_pre_1_users/alembic.ini",
  "pypi_package_index.json",
  "pyspark/ml/log_model_allowlist.txt",
  "server/auth/basic_auth.ini",
  "server/auth/db/migrations/alembic.ini",
  "recipes/resources/**/*",
  "recipes/cards/templates/**/*",
  "models/container/**/*",
  "server/js/build/**/*",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["mlflow", "mlflow.*"]
exclude = ["tests", "tests.*"]

# Package metadata: can't be updated manually, use dev/pyproject.py
# -----------------------------------------------------------------
# Dev tool settings: can be updated manually

[tool.ruff]
line-length = 100
target-version = "py38"
force-exclude = true
extend-include = ["*.ipynb"]
extend-exclude = [
  "examples/recipes",
  "mlflow/protos",
  "mlflow/ml_package_versions.py",
  "mlflow/server/graphql/autogenerated_graphql_schema.py",
  "mlflow/server/js",
  "mlflow/store/db_migrations",
  "tests/protos",
]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 88

[tool.ruff.lint]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
select = [
  "B006",    # multiple-argument-default
  "B015",    # useless-comparison
  "D209",    # new-line-after-last-paragraph
  "D411",    # no-blank-line-before-section
  "E",       # error
  "F",       # Pyflakes
  "C4",      # flake8-comprehensions
  "I",       # isort
  "ISC001",  # single-line-implicit-string-concatenation
  "PIE790",  # unnecessary-placeholder
  "PLR0402", # manual-from-import
  "PLE1205", # logging-too-many-args
  "PT001",   # pytest-fixture-incorrect-parentheses-style
  "PT002",   # pytest-fixture-positional-args
  "PT003",   # pytest-extraneous-scope-function
  "PT006",   # pytest-parameterize-names-wrong-type
  "PT007",   # pytest-parameterize-values-wrong-type
  "PT009",   # pytest-unittest-assertion
  "PT010",   # pytest-raises-without-exception
  "PT011",   # pytest-raises-too-broad
  "PT012",   # pytest-raises-with-multiple-statements
  "PT013",   # pytest-incorrect-pytest-import
  "PT014",   # pytest-duplicate-parametrize-test-cases
  "PT018",   # pytest-composite-assertion
  "PT022",   # pytest-useless-yield-fixture
  "PT023",   # pytest-incorrect-mark-parentheses-style
  "PT026",   # pytest-use-fixtures-without-parameters
  "PT027",   # pytest-unittest-raises-assertion
  "RET504",  # unnecessary-assign
  "RUF010",  # explicit-f-string-type-conversion
  "RUF013",  # implicit-optional
  "RUF100",  # unused-noqa
  "S307",    # suspicious-eval-usage
  "S324",    # hashlib-insecure-hash-function
  "SIM101",  # duplicate-isinstance-call
  "SIM103",  # needless-bool
  "SIM108",  # if-else-block-instead-of-if-exp
  "SIM114",  # if-with-same-arms
  "SIM115",  # open-file-with-context-handler
  "SIM210",  # if-expr-with-true-false
  "SIM910",  # dict-get-with-none-default
  "T20",     # flake8-print
  "TID251",  # banned-api
  "TID252",  # relative-improt
  "TRY302",  # useless-try-except
  "UP004",   # useless-object-inheritance
  "UP008",   # super-call-with-parameters
  "UP011",   # lru-cache-without-parameters
  "UP012",   # unecessary-encode-utf8
  "UP015",   # redundant-open-modes
  "UP030",   # format-literals
  "UP031",   # printf-string-format
  "UP032",   # f-string
  "UP034",   # extraneous-parenthesis
  "W",       # warning
]
ignore = [
  "E402", # module-import-not-at-top-of-file
  "E721", # type-comparison
  "E741", # ambiguous-variable-name
  "F811", # redefined-while-unused
]

[tool.ruff.lint.per-file-ignores]
"dev/*" = ["T201", "PT018"]
"examples/*" = ["T20", "RET504", "E501"]
"docs/*" = ["T20", "RET504", "E501"]
"mlflow/*" = ["PT018"]

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false
fixture-parentheses = false
raises-require-match-for = ["*"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
forced-separate = ["tests"]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"pkg_resources".msg = "We're migrating away from pkg_resources. Please use importlib.resources or importlib.metadata instead."

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.clint]
exclude = [
  "docs",
  "mlflow/protos",
  "mlflow/ml_package_versions.py",
  "mlflow/server/js",
  "mlflow/store/db_migrations",
  "tests/protos",
]
